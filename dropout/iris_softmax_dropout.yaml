!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.iris.Iris {
        preprocessor: !obj:pylearn2.datasets.preprocessing.ShuffleAndSplit {
            seed: &seed [1],
            start: 0,
            stop: &end_train 100
        }
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [
                 # !obj:pylearn2.models.maxout.Maxout {
                 #    layer_name: 'h0',
                 #    num_units: 240,
                 #    num_pieces: 5,
                 #    irange: .005,
                 #    max_col_norm: 1.9365,
                 # },
                 # !obj:pylearn2.models.maxout.Maxout {
                 #    layer_name: 'h1',
                 #    num_units: 240,
                 #    num_pieces: 5,
                 #    irange: .005,
                 #    max_col_norm: 1.9365,
                 # },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 3,
                     irange: .005
                 }
                ],
        nvis: 4,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 10,
        learning_rate: .01,
        init_momentum: .5,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:pylearn2.datasets.iris.Iris {
                              preprocessor: !obj:pylearn2.datasets.preprocessing.ShuffleAndSplit {
                                  seed: *seed,
                                  start: *end_train,
                                  stop: &end_valid 125
                            }
                        },
                'test' : !obj:pylearn2.datasets.iris.Iris {
                              preprocessor: !obj:pylearn2.datasets.preprocessing.ShuffleAndSplit {
                                  seed: *seed,
                                  start: *end_valid,
                                  stop: 150
                            }
                        }
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'y' : .8 },
            input_scales: { 'y': 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        },
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.000004,
            min_lr: .000001
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        }
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
