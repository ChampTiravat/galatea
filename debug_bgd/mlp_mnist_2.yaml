!obj:pylearn2.train.Train {
    # Here we specify the dataset to train on. We train on only the first 900 of the examples, so
    # that the rest may be used as a validation set.
    # The "&train" syntax lets us refer back to this object as "*train" elsewhere in the yaml file
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: 'train',
        one_hot: 1
    },
    # Here we specify the model to train as being an MLP
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 1000,
        layers : [
            # We use two hidden layers with rectified linear activations
            !obj:pylearn2.models.mlp.Sigmoid {
                layer_name: 'h0',
                dim: 1875,
                irange: .05,
                # Rather than using weight decay, we constrain the norms of the weight vectors
                max_col_norm: 2.
            },
            !obj:pylearn2.models.mlp.Sigmoid {
                layer_name: 'h1',
                dim: 1875,
                irange: .05,
                # Rather than using weight decay, we constrain the norms of the weight vectors
                max_col_norm: 2.
            },
            !obj:pylearn2.models.mlp.Sigmoid {
                layer_name: 'h2',
                dim: 1875,
                irange: .05,
                # Rather than using weight decay, we constrain the norms of the weight vectors
                max_col_norm: 2.
            },
            !obj:pylearn2.models.mlp.Softmax {
                layer_name: 'y',
                init_bias_target_marginals: *train,
                # Initialize the weights to all 0s
                irange: .0,
                n_classes: 10
            }
        ],
        nvis: 784,
    },
    # We train using SGD and momentum
    algorithm: !obj:pylearn2.training_algorithms.bgd.BGD {
        updates_per_batch: 5,
        conjugate: 1,
        reset_conjugate: 0,
        reset_alpha: 0,
        # We monitor how well we're doing during training on a validation set
        monitoring_batches: 10,
        monitoring_dataset:
            {
                'train' : *train,
            },
        # We stop when validation set classification error hasn't decreased for 10 epochs
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "train_y_misclass",
            prop_decrease: 0.,
            N: 10
        },
    },
    # We save the model whenever we improve on the validation set classification error
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'train_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
