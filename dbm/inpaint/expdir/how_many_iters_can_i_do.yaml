# Like mnist_sup_inpaint_P, but rerun after fixing a bug in inpaint_alg that made it do only
# 10 batches per epoch
!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.binarizer.Binarizer {
      raw: &raw_train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: "train",
        shuffle: 0,
        one_hot: 1,
        start: 0,
        stop: 50000
    }},
    model: !obj:galatea.dbm.inpaint.super_dbm.SuperDBM {
              batch_size : 1250,
              niter: 75, # 50 succeeded, 100 failed
              visible_layer: !obj:galatea.dbm.inpaint.super_dbm.BinaryVisLayer {
                nvis: 784,
                bias_from_marginals: *raw_train,
              },
              hidden_layers: [
                !obj:galatea.dbm.inpaint.super_dbm.DenseMaxPool {
                        detector_layer_dim: 500,
                        pool_size: 1,
                        sparse_init: 15,
                        layer_name: 'h0',
                        init_bias: 0.
               },
                !obj:galatea.dbm.inpaint.super_dbm.DenseMaxPool {
                        detector_layer_dim: 1000,
                        pool_size: 1,
                        sparse_init: 15,
                        layer_name: 'h1',
                        init_bias: 0.
               },
              ]
    },
    algorithm: !obj:pylearn2.training_algorithms.bgd.BGD {
               init_alpha : [0.0256, .128, .256, 1.28, 2.56],
               verbose_optimization: 3,
               monitoring_dataset : {
                        'train': *train,
                        'valid': !obj:pylearn2.datasets.binarizer.Binarizer { raw: !obj:pylearn2.datasets.mnist.MNIST {
                                which_set: "train",
                                shuffle: 0,
                                one_hot: 1,
                                start: 50000,
                                stop: 60000
                            }},
               },
               line_search_mode: 'exhaustive',
               #init_alpha : [0.0256, .128, .256, 1.28, 2.56],
               reset_alpha: 0,
               conjugate: 1,
               reset_conjugate: 0,
               updates_per_batch: 6,
               cost: !obj:pylearn2.costs.cost.SumOfCosts {
                       costs :[
                               !obj:galatea.dbm.inpaint.super_inpaint.SuperInpaint {
                                        both_directions : 0,
                                        noise : 0,
                                        l1_act_targets: [  .06, .07, ],
                                        l1_act_eps:     [  .04,  .05, ],
                                        l1_act_coeffs:  [ .01,  .000,  ],
                                        mask_gen : !obj:galatea.dbm.inpaint.super_inpaint.MaskGen {
                                                drop_prob: 0.1,
                                                balance: 0,
                                                sync_channels: 0
                                         },
                               },
                               !obj:galatea.dbm.inpaint.super_dbm.DBM_WeightDecay {
                                        coeffs: [ .0000005, .0000005 ]
                               }
                       ]
               },
               termination_criterion: !obj:pylearn2.termination_criteria.Or {
                criteria: [
                 #!obj:pylearn2.termination_criteria.MonitorBased
                 #{
                 #       channel_name: "valid_objective",
                 #       N: 15,
                 #       prop_decrease: 0.
                 #},
                 !obj:pylearn2.termination_criteria.MonitorBased
                 {
                        channel_name: "valid_objective",
                        N: 15,
                        prop_decrease: 0.
                 }
                 ]
               }
        },
    extensions: [
                !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                        channel_name: "valid_objective",
                        save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
                },
                !obj:pylearn2.training_algorithms.bgd.StepShrinker {
                        channel: "valid_objective",
                        scale: .5,
                        giveup_after: .0001,
                        scale_up: 1.1
                }
        ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq : 1
}

