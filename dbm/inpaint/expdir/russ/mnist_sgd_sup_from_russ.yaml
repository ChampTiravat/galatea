!obj:pylearn2.scripts.train.Train {
    dataset:  &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: "train",
        binarize: 1,
        one_hot: 1,
        start: 0,
        stop: 50000
    },
        model: !obj:galatea.dbm.inpaint.super_dbm.set_niter {
                super_dbm: !pkl: "/u/goodfeli/galatea/dbm/inpaint/russ/after_joint_train_gpu.pkl",
                niter: 6
        },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
               batch_size: 100,
               set_batch_size: 1,
               learning_rate: 1e-3,
               init_momentum: .5,
               monitoring_dataset: {
                                'train' : *train,
                                'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                                        which_set: "train",
                                        binarize: 1,
                                        one_hot: 1,
                                        start: 50000,
                                        stop:  60000
                                        }
               },
               cost : !obj:galatea.dbm.inpaint.super_dbm.SuperDBM_ConditionalNLL {
               },
               termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased
               {
                        channel_name: "valid_err",
                        prop_decrease: .00,
                        N : 20
               }
        },
    callbacks: [
                !obj:pylearn2.training_callbacks.best_params.MonitorBasedSaveBest {
                        channel_name: "valid_err",
                        save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
                },
                !obj:pylearn2.training_algorithms.sgd.PolyakAveraging {
                        save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_polyak.pkl",
                        start: 50
                }
        ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq : 1
}

