!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: "train",
        shuffle: 0,
        one_hot: 1,
        start: 0,
        stop: 50000
    },
    model: !obj:galatea.dbm.inpaint.super_dbm.SuperDBM {
              batch_size : 100,
              niter: 1,
              visible_layer: !obj:galatea.dbm.inpaint.super_dbm.GaussianConvolutionalVisLayer {
                rows: 28,
                cols: 28,
                channels: 1,
              },
              hidden_layers: [
                !obj:galatea.dbm.inpaint.super_dbm.ConvMaxPool {
                        border_mode: 'full',
                        output_channels: 32,
                        kernel_rows: 5,
                        kernel_cols: 5,
                        pool_rows: 2,
                        pool_cols: 2,
                        irange: .005,
                        layer_name: 'h0',
                        init_bias: -3.
               },
                !obj:galatea.dbm.inpaint.super_dbm.ConvMaxPool {
                        border_mode: 'full',
                        output_channels: 32,
                        kernel_rows: 5,
                        kernel_cols: 5,
                        pool_rows: 2,
                        pool_cols: 2,
                        irange: .005,
                        layer_name: 'h1',
                        init_bias: -3.
               },
               !obj:galatea.dbm.inpaint.super_dbm.Softmax {
                        irange: .005,
                        layer_name: 'c',
                        n_classes: 10
               }
              ]
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
      learning_rate: .1,
      init_momentum: .5,
       monitoring_dataset : {
                        'train': *train,
                        'valid': !obj:pylearn2.datasets.mnist.MNIST {
                                which_set: "train",
                                shuffle: 0,
                                one_hot: 1,
                                start: 50000,
                                stop: 60000
                            },
               },
               cost: !obj:pylearn2.costs.cost.SumOfCosts {
                       costs :[
                               !obj:galatea.dbm.inpaint.super_dbm.SuperDBM_ConditionalNLL {
                               },
                               #!obj:galatea.dbm.inpaint.super_dbm.DBM_WeightDecay {
                               #         coeffs: [ .0000005, .0000005, .0000005 ]
                               #}
                       ]
               },
               termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased
               {
                        channel_name: "valid_objective",
                        N: 15,
                        prop_decrease: 0.
               },
               update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
                    decay_factor: 1.0004,
                    min_lr: 1e-5
               }
        },
    extensions: [
                !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                        channel_name: "valid_err",
                        save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
                },
                !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
                    start: 1,
                    saturate: 5,
                    final_momentum: .9
                }
        ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq : 1
}

