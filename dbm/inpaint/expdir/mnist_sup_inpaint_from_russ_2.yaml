# Like mnist_sup_inpaint_PW, but initialized from Russ's joint trained model
!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.binarizer.Binarizer {
      raw: &raw_train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: "train",
        shuffle: 0,
        one_hot: 1,
        start: 0,
        stop: 50000
    }},
    model: !obj:galatea.dbm.inpaint.super_dbm.set_niter {
              niter: 6,
           super_dbm: !pkl: "${G}/dbm/inpaint/russ/after_joint_train_gpu.pkl"
    },
    algorithm: !obj:pylearn2.training_algorithms.bgd.BGD {
               scale_step: .1,
               seed: [2012, 10, 17],
               monitoring_dataset : {
                        'train': *train,
                        'valid': !obj:pylearn2.datasets.binarizer.Binarizer { raw: !obj:pylearn2.datasets.mnist.MNIST {
                                which_set: "train",
                                shuffle: 0,
                                one_hot: 1,
                                start: 50000,
                                stop: 60000
                            }},
               },
               line_search_mode: 'exhaustive',
               init_alpha : [0.0256, .128, .256, 1.28, 2.56],
               reset_alpha: 0,
               conjugate: 1,
               reset_conjugate: 0,
               updates_per_batch: 5,
               cost: !obj:pylearn2.costs.cost.SumOfCosts {
                       costs :[
                               !obj:galatea.dbm.inpaint.super_inpaint.SuperInpaint {
                                        both_directions : 0,
                                        noise : 0,
                                        supervised: 1,
                                        toronto_act_targets: [  .2, .1, 0. ],
                                        toronto_act_coeffs:  [ .001,  .001, 0.  ],
                                        mask_gen : !obj:galatea.dbm.inpaint.super_inpaint.MaskGen {
                                                drop_prob: 0.1,
                                                balance: 0,
                                                sync_channels: 0
                                        }
                               },
                               !obj:galatea.dbm.inpaint.super_dbm.DBM_WeightDecay {
                                        coeffs: [ .0000005, .0000005, .0000005 ]
                               }
                       ]
               },
               termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased
               {
                        channel_name: "valid_objective",
                        N: 15,
                        prop_decrease: 0.
               }
        },
    extensions: [
                !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                        channel_name: "valid_err",
                        save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
                }
        ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq : 1
}

