# Use column norm constraints instead of weight decay
!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.binarizer.Binarizer {
      raw: &raw_train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: "train",
        shuffle: 0,
        one_hot: 1,
        start: 0,
        stop: 50000
    }},
    model: !obj:pylearn2.monitor.push_monitor {
        model: !pkl: "expdir/mnist_sup_inpaint_X3E_best.pkl",
        name: "monitor_first",
        transfer_experience: 1
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
               monitoring_dataset : {
                        'train': *train,
                        'valid': !obj:pylearn2.datasets.binarizer.Binarizer { raw: !obj:pylearn2.datasets.mnist.MNIST {
                                which_set: "train",
                                shuffle: 0,
                                one_hot: 1,
                                start: 50000,
                                stop: 60000
                            }},
               },
               learning_rate: 2.79,
               init_momentum: .5,
               cost: !obj:pylearn2.costs.cost.SumOfCosts {
                       costs :[
                               !obj:galatea.dbm.inpaint.super_inpaint.SuperInpaint {
                                    monitor_multi_inference: 1,
                                        both_directions : 0,
                                        noise : 0,
                                        supervised: 1,
                                        l1_act_targets: [  .06, .07, 0. ],
                                        l1_act_eps:     [  .04,  .05, 0. ],
                                        l1_act_coeffs:  [ .01,  .0001, 0.  ],
                                       mask_gen : !obj:galatea.dbm.inpaint.super_inpaint.MaskGen {
                                                drop_prob: 0.5,
                                                drop_prob_y: 1.,
                                                balance: 0,
                                                sync_channels: 0
                                       },
                               },
                               #!obj:galatea.dbm.inpaint.super_dbm.DBM_WeightDecay {
                               #         coeffs: [ .0000005, .0000005, .0000005 ]
                               #}
                       ]
               },
               termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased
               {
                        channel_name: "valid_multi_err",
                        N: 30,
                        prop_decrease: 0.
               }
        },
    extensions: [
                !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                        channel_name: "valid_multi_err",
                        save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
                },
                !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
                    start: 1,
                    saturate: 2,
                    final_momentum: .6
                },
                !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
                    start: 1,
                    saturate: 250,
                    decay_factor: .01
                }
        ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq : 1
}

