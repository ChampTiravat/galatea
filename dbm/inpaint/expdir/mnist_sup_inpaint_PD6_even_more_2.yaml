!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: "train",
        shuffle: 0,
        binarize: 1,
        one_hot: 1,
        start: 0,
        stop: 50000
    },
    model: !obj:pylearn2.monitor.push_monitor {
        model: !pkl: "${G}/dbm/inpaint/expdir/mnist_sup_inpaint_PD6_more_best.pkl",
        name: "monitor_ncg"
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
               learning_rate: 1e-1,
               init_momentum: .5,
               monitoring_dataset : {
                        'train': *train,
                        'valid': !obj:pylearn2.datasets.mnist.MNIST {
                                which_set: "train",
                                shuffle: 0,
                                binarize: 1,
                                one_hot: 1,
                                start: 50000,
                                stop: 60000
                            },
               },
               cost: !obj:pylearn2.costs.cost.SumOfCosts {
                       costs :[
                               !obj:galatea.dbm.inpaint.super_inpaint.SuperInpaint {
                                        both_directions : 0,
                                        noise : 0,
                                        supervised: 1,
                                        l1_act_targets: [  .06, .07, 0. ],
                                        l1_act_eps:     [  .04,  .05, 0. ],
                                        l1_act_coeffs:  [ .01,  .01, 0.  ],
                                        #range_rewards:  [ .00000, .0001, 0.],
                                         mask_gen : !obj:galatea.dbm.inpaint.super_inpaint.MaskGen {
                                                drop_prob: 0.1,
                                                balance: 0,
                                                sync_channels: 0
                                       },
                               },
                               !obj:galatea.dbm.inpaint.super_dbm.DBM_WeightDecay {
                                        coeffs: [ .0000005, .0000005, .0000005 ]
                               }
                       ]
               },
               termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased
               {
                        channel_name: "valid_objective",
                        N: 15,
                        prop_decrease: 0.
               }
        },
    callbacks: [
                !obj:pylearn2.training_callbacks.best_params.MonitorBasedSaveBest {
                        channel_name: "valid_err",
                        save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
                }
        ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq : 1
}

