!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.binarizer.Binarizer {
        raw: &raw_train !obj:pylearn2.datasets.mnist.MNIST {
            which_set: "train",
            shuffle: 0,
            one_hot: 1,
            start: 0,
            stop: 50000
        }
    },
    model: !obj:galatea.dbm.inpaint.super_dbm.SuperDBM {
        batch_size : %(inpaint_batch_size)d,
        niter: %(inpaint_mf_iter)d, 
        visible_layer: !obj:galatea.dbm.inpaint.super_dbm.BinaryVisLayer {
            nvis: 784,
            bias_from_marginals: *raw_train,
        },
        hidden_layers: [
            !obj:galatea.dbm.inpaint.super_dbm.DenseMaxPool {
                detector_layer_dim: %(h0_dim)d,
                pool_size: 1,
                sparse_init: %(h0_sparse_init)d,
                layer_name: 'h0',
                init_bias: %(h0_init_bias)f
            },
            !obj:galatea.dbm.inpaint.super_dbm.DenseMaxPool {
                detector_layer_dim: %(h1_dim)d,
                pool_size: 1,
                sparse_init: %(h1_sparse_init)d,
                layer_name: 'h1',
                init_bias: %(h1_init_bias)f
            },
            !obj:galatea.dbm.inpaint.super_dbm.Softmax {
                sparse_init: %(c_sparse_init)d,
                layer_name: 'c',
                n_classes: 10
            }
        ]
    },
    algorithm: !obj:pylearn2.training_algorithms.bgd.BGD {
        seed: [2012, 10, 17],
        scale_step: %(inpaint_scale_step)f,
        monitoring_dataset : {
            'train': *train,
            'valid': !obj:pylearn2.datasets.binarizer.Binarizer {
                raw: !obj:pylearn2.datasets.mnist.MNIST {
                    which_set: "train",
                    shuffle: 0,
                    one_hot: 1,
                    start: 50000,
                    stop: 60000
                }
            },
        },
        line_search_mode: 'exhaustive',
        init_alpha : [0.0256, .128, .256, 1.28, 2.56],
        reset_alpha: 0,
        conjugate: 1,
        reset_conjugate: 0,
        updates_per_batch: %(inpaint_updates_per_batch)d,
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
             costs :[
                 !obj:galatea.dbm.inpaint.super_inpaint.SuperInpaint {
                     both_directions : 0,
                     noise : 0,
                     supervised: 1,
                     l1_act_targets: [ %(targ_0)f, %(targ_1)f, 0. ],
                     l1_act_eps:     [ %(eps_0)f,  %(eps_1)f, 0. ],
                     l1_act_coeffs:  [ %(act_coeff_0)f, %(act_coeff_1)f, 0.  ],
                     mask_gen : !obj:galatea.dbm.inpaint.super_inpaint.MaskGen {
                         drop_prob: %(drop_prob)f,
                         balance: 0,
                         sync_channels: 0
                     },
                 },
                 !obj:galatea.dbm.inpaint.super_dbm.DBM_WeightDecay {
                     coeffs: [ %(wd0)f, %(wd1)f, %(wdc)f ]
                 }
             ]
         },
         termination_criterion: !obj:pylearn2.termination_criteria.And {
                criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased
                 {
                     channel_name: "valid_objective",
                     N: 15,
                     prop_decrease: 0.
                 },
                 !obj:galatea.termination_criteria.Throwaway {}
                 ]
       }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
            channel_name: "valid_err",
            save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        }
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq : 1
}

