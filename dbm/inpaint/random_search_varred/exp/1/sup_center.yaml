!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.binarizer.Binarizer {
      raw: &raw_train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: "train",
        shuffle: 0,
        one_hot: 1,
        start: 0,
        stop: 50000
    }},
    model: !obj:galatea.dbm.inpaint.super_dbm.SpeedMonitoringDBM {
              batch_size : 100,
              niter: 9, #note: since we have to backprop through the whole thing, this does
                         #increase the memory usage
              visible_layer: !obj:galatea.dbm.inpaint.super_dbm.BinaryVisLayer {
                nvis: 784,
                bias_from_marginals: *raw_train,
                center: 1,
              },
              hidden_layers: [
                !obj:galatea.dbm.inpaint.super_dbm.DenseMaxPool {
                    center: 1,
                        max_col_norm: 4.854779,
                        detector_layer_dim: 500,
                        pool_size: 1,
                        irange: 0.013787674111,
                        layer_name: 'h0',
                        init_bias: -2.248567
               },
                !obj:galatea.dbm.inpaint.super_dbm.DenseMaxPool {
                    center: 1,
                        max_col_norm: 3.552135,
                        detector_layer_dim: 1000,
                        pool_size: 1,
                        irange: 0.0566681506377,
                        layer_name: 'h1',
                        init_bias: -2.904133
               },
               !obj:galatea.dbm.inpaint.super_dbm.Softmax {
                    center: 1,
                        max_col_norm: 1.858677,
                        sparse_init: 14,
                        layer_name: 'c',
                        n_classes: 10
               }
              ]
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        monitoring_dataset : {
            # 'train': *train,
            raw_valid: !obj:pylearn2.datasets.mnist.MNIST {
                                which_set: "train",
                                shuffle: 0,
                                one_hot: 1,
                                start: 50000,
                                stop: 60000
                            },
               },
         learning_rate: 0.027391,
        init_momentum: .5,
               cost: !obj:pylearn2.costs.cost.SumOfCosts {
                   costs :[  !obj:galatea.dbm.inpaint.super_dbm.MF_L1_ActCost {
            targets: [  0.104756, 0.154934, 0. ],
            eps:     [  0.002703,  0.030180, 0. ],
            coeffs:  [ 0.015420, 0.000610, 0.  ],
            supervised: 0
        },
                       !obj:galatea.costs.dbm.VariationalPCD_VarianceReduction {
                           supervised: 1,
                           num_chains: 100,
                           num_gibbs_steps: 5,
                       }
                       ]
               },
               termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased
               {
                        channel_name: "raw_valid_misclass",
                        N: 100,
                        prop_decrease: 0.
               }
        },
    extensions: [
                !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                        channel_name: "raw_valid_misclass",
                        save_path: "exp/1/sup_center_best.pkl"
                },
                !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
                    start: 1,
                    saturate: 2,
                    final_momentum: 0.821077
                },
                !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
                    start: 1,
                    saturate: 310,
                    decay_factor: 0.098573
                }
        ],
    save_path: "exp/1/sup_center.pkl",
    save_freq : 1
}
    