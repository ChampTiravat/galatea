!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: 'train',
        one_hot: 1,
        axes: ['c', 0, 1, 'b'],
    },
    model: &model !obj:pylearn2.monitor.push_monitor {
        model: !pkl: "expdir/mnist_conv_dropout_3_best.pkl",
        name: "monitor_first"
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate:   0.00260159000754,
        init_momentum: 0.651003837585,
        monitoring_dataset:
            {
                #'train' : *train,
                'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                              axes: ['c', 0, 1, 'b'],
                              which_set: 'train',
                              one_hot: 1,
                              start: 50000,
                              stop:  60000
                          },
                #'test'  : !obj:pylearn2.datasets.cifar10.CIFAR10 {
                #              which_set: 'test',
                #              gcn: 55.,
                #              one_hot: 1,
                #          }
            },
        cost: &cost !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
                supervised: 1
        },
        termination_criterion: !obj:pylearn2.termination_criteria.ChannelTarget {
            target: !obj:galatea.mlp.get_channel {
                batch_size: 100,
                cost: *cost,
                dataset: !obj:pylearn2.datasets.mnist.MNIST {
                    which_set: 'train',
                    axes: ['c', 0, 1, 'b'],
                    one_hot: 1,
                    start: 0,
                    stop: 50000
                },
                model: *model,
                channel: 'y_nll'
            },
            channel_name: "valid_y_nll",
        },
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.00004,
            min_lr: .000001
        }
    },
    extensions: [
        #!obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
        #    start: 1,
        #    saturate: 250,
        #    final_momentum: .7
        #}
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
