!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.cifar10.CIFAR10 {
        axes: ['c', 0, 1, 'b'],
        which_set: 'train',
        gcn: 55.,
        one_hot: 1,
        start: 0,
        stop: 40000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [
                 !obj:galatea.mlp.ConvLinearC01B {
                     layer_name: 'h0',
                     pad: 0,
                     detector_channels: 16,
                     channel_pool_size: 8,
                     kernel_shape: [1, 1],
                     pool_shape: [1, 1],
                     fix_pool_shape: 1,
                     pool_stride: [0, 0],
                     irange: 1.000000,
                     max_kernel_norm: 0.100000,
                 },
                 !obj:galatea.mlp.ConvLinearC01B {
                     layer_name: 'h1',
                     pad: 0,
                     detector_channels: 768,
                     channel_pool_size: 8,
                     kernel_shape: [1, 1],
                     pool_shape: [1, 1],
                     fix_pool_shape: 1,
                     pool_stride: [1, 1],
                     irange: 0.000010,
                     max_kernel_norm: 0.100000,
                 },
                 !obj:galatea.mlp.ConvLinearC01B {
                     layer_name: 'h2',
                     pad: 10,
                     detector_channels: 16,
                     channel_pool_size: 8,
                     kernel_shape: [10, 10],
                     pool_shape: [1, 1],
                     fix_pool_shape: 1,
                     pool_stride: [1, 1],
                     irange: 0.000010,
                     max_kernel_norm: 0.100000,
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 10.000000,
                     layer_name: 'y',
                     n_classes: 10,
                     irange: 1.000000
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [32, 32],
            axes: ['c', 0, 1, 'b'],
            num_channels: 3
        },
        dropout_include_probs: [ 0.990000, 0.990000, 0.990000, 1 ],
        dropout_scales: [ 100.000000, 1.000000, 100.000000, 1. ],
        dropout_input_include_prob: 0.010000,
        dropout_input_scale: 1.000000,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 128,
        learning_rate: 10.000000,
        init_momentum: 0.000000,
        monitoring_dataset:
            {
                'valid' : !obj:pylearn2.datasets.cifar10.CIFAR10 {
                              which_set: 'train',
                              axes: ['c', 0, 1, 'b'],
                              gcn: 55.,
                              one_hot: 1,
                              start: 40000,
                              stop:  50000
                          },
            },
        cost: !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
                supervised: 1
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        },
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.000000,
            min_lr: .000001
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 500,
            final_momentum: 0.000000
        }
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
