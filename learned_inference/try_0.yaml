!obj:pylearn2.train.Train {
    dataset: &train !obj:galatea.learned_inference.s3c_dataset.S3C_Dataset {
        s3c: &s3c !pkl: "${G}/learned_inference/s3c.pkl",
        flatten: 1
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [
            !obj:pylearn2.models.maxout.Maxout {
                layer_name: 'pred_0',
                num_units: 3200,
                num_pieces: 5,
                irange: .005,
                max_col_norm: 1.9,
            },
            !obj:pylearn2.models.maxout.Maxout {
                layer_name: 'pred_1',
                num_units: 3200,
                num_pieces: 5,
                irange: .005,
                max_col_norm: 1.9,
            },
                 !obj:pylearn2.models.mlp.FlattenerLayer {
                     raw_layer: !obj:pylearn2.models.mlp.CompositeLayer {
                     layer_name: 'var_params',
                     layers: [
                        !obj:pylearn2.models.mlp.Sigmoid {
                            layer_name: 'h',
                            dim: 1600,
                            irange: .05,
                            init_bias: !obj:galatea.learned_inference.read_param {
                                model: *s3c,
                                param: 'bias_hid'
                           }
                        },
                        !obj:pylearn2.models.mlp.LinearGaussian {
                            init_bias: !obj:galatea.learned_inference.read_param {
                                model: *s3c,
                                param: 'mu'
                           },
                            init_beta: 1.,
                            min_beta: .1,
                            max_beta: 100.,
                            beta_lr_scale: 1e-3,
                            layer_name: 's',
                            irange: .05,
                            dim: 1600
                        },
                     ]
                 }}
                ],
        nvis: 108,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        train_iteration_mode: 'random_uniform',
        monitor_iteration_mode: 'random_uniform',
        batches_per_iter: 1000,
        batch_size: 100,
        learning_rate: .05,
        init_momentum: .5,
        monitoring_batches: 100,
        monitoring_dataset:
            {
                'train' : *train,
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'pred_0' : .8 },
            input_scales: { 'pred_0': 1. }
        },
        # termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
        #    channel_name: "valid_y_misclass",
        #    prop_decrease: 0.,
        #    N: 100
        # },
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.000004,
            min_lr: .000001
        }
    },
    extensions: [
        # !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
        #     channel_name: 'valid_y_misclass',
        #     save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        # },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        }
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
